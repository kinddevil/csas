#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

# remote="$1"
# url="$2"

# go lint
 lint_results="$(go fmt ./...)"
 if test -n "$lint_results" ; then
        echo -e "Lint: \n$lint_results"
        exit 1
fi

# build project
build_result=$(go build)
build_rc=$?
if [ $build_rc -ne 0 ] ; then
	echo "git pre-commit check failed: build failed."
	exit 1
else
  rm -f transit
fi

# run tests
failed_tests="$(go test ./... -cover | grep "FAIL" | awk '{print $2}')"
# failed_tests="$(go test ./... -cover | grep "FAIL")"
if test -n "$failed_tests" ; then
  for failed in $failed_tests; do
    echo "git pre-commit check failed: test failed: $failed"
  done
  exit 1
fi

# code coverage
cover_threshold=90
coverage="$(go test ./... -cover | cut -f4 | grep -o "[0-9.]*%" | cut -f1 -d"%" -d"." | while read line; do if [ $line -lt $cover_threshold ]; then echo "test coverage is $line less than cover_threshold"; fi; done;)"
if test -n "$coverage" ; then
  echo "Coverage fail: \n$coverage"
  exit 1
fi

gofiles=$(git diff --cached --name-only --diff-filter=ACM | grep '.go$')
[ -z "$gofiles" ] && exit 0

exit 0
